{"ast":null,"code":"import _slicedToArray from\"/mnt/d/go_away_covid-19_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import axios from\"axios\";import Map from\"./Map\";import{useEffect,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";function ApiCall(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var url=\"http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19SidoInfStateJson\";var ServiceKey=\"jFJq%2B%2BJgU2Mc8PrE5BxRZetsGiBrM%2BXDSku%2FUFCuzZ7j8FrslWnJ%2BR2xa7QbRStVG9HfSDU%2BmBQz3SCSfZmfXw%3D%3D\";var result=axios.get(url+\"?ServiceKey=\"+ServiceKey);useEffect(function(){function getResult(){return new Promise(function(resolve,reject){if(result){resolve(result);}reject(\"응답이 거절 되었습니다.\");});}getResult().then(function(showData){var requestDate=showData.data.response.body.items.item;var gubunData=[];var incDecData=[];var totalData=[];var finalData={};for(var i=0;i<requestDate.length;i++){gubunData.push(requestDate[i].gubun);incDecData.push(requestDate[i].incDec);totalData.push(requestDate[i].defCnt);}finalData[\"gubun\"]=gubunData;finalData[\"incDec\"]=incDecData;finalData[\"total\"]=totalData;setData(finalData);});getResult();},[]);var covid=data;return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Map,{apiresult:covid})});}export default ApiCall;","map":{"version":3,"sources":["/mnt/d/go_away_covid-19_react/src/ApiCall.js"],"names":["axios","Map","useEffect","useState","ApiCall","data","setData","url","ServiceKey","result","get","getResult","Promise","resolve","reject","then","showData","requestDate","response","body","items","item","gubunData","incDecData","totalData","finalData","i","length","push","gubun","incDec","defCnt","covid"],"mappings":"oJAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,C,2CAEA,QAASC,CAAAA,OAAT,EAAmB,CACjB,cAAwBD,QAAQ,CAAC,EAAD,CAAhC,wCAAOE,IAAP,eAAaC,OAAb,eACA,GAAMC,CAAAA,GAAG,CAAG,mFAAZ,CACA,GAAMC,CAAAA,UAAU,CAAG,0GAAnB,CAEA,GAAMC,CAAAA,MAAM,CAAGT,KAAK,CAACU,GAAN,CAAUH,GAAG,CAAG,cAAN,CAAuBC,UAAjC,CAAf,CAEAN,SAAS,CAAC,UAAM,CACd,QAASS,CAAAA,SAAT,EAAqB,CACnB,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtC,GAAIL,MAAJ,CAAY,CACVI,OAAO,CAACJ,MAAD,CAAP,CACD,CACDK,MAAM,CAAC,eAAD,CAAN,CACD,CALM,CAAP,CAMD,CAGAH,SAAS,GAAGI,IAAZ,CAAiB,SAAUC,QAAV,CAAoB,CAEpC,GAAMC,CAAAA,WAAW,CAAGD,QAAQ,CAACX,IAAT,CAAca,QAAd,CAAuBC,IAAvB,CAA4BC,KAA5B,CAAkCC,IAAtD,CAEA,GAAMC,CAAAA,SAAS,CAAG,EAAlB,CACA,GAAMC,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAMC,CAAAA,SAAS,CAAG,EAAlB,CACA,GAAMC,CAAAA,SAAS,CAAG,EAAlB,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGT,WAAW,CAACU,MAAhC,CAAwCD,CAAC,EAAzC,CAA6C,CAC3CJ,SAAS,CAACM,IAAV,CAAeX,WAAW,CAACS,CAAD,CAAX,CAAeG,KAA9B,EACAN,UAAU,CAACK,IAAX,CAAgBX,WAAW,CAACS,CAAD,CAAX,CAAeI,MAA/B,EACAN,SAAS,CAACI,IAAV,CAAeX,WAAW,CAACS,CAAD,CAAX,CAAeK,MAA9B,EACD,CACDN,SAAS,CAAC,OAAD,CAAT,CAAqBH,SAArB,CACAG,SAAS,CAAC,QAAD,CAAT,CAAsBF,UAAtB,CACAE,SAAS,CAAC,OAAD,CAAT,CAAqBD,SAArB,CACAlB,OAAO,CAACmB,SAAD,CAAP,CACD,CAlBA,EAmBCd,SAAS,GACZ,CA/BQ,CA+BP,EA/BO,CAAT,CAiCA,GAAMqB,CAAAA,KAAK,CAAG3B,IAAd,CAEA,mBACE,kCACG,KAAC,GAAD,EAAK,SAAS,CAAE2B,KAAhB,EADH,EADF,CAKD,CAED,cAAe5B,CAAAA,OAAf","sourcesContent":["import axios from \"axios\";\r\nimport Map from \"./Map\"\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction ApiCall() {\r\n  const [data, setData] = useState('');\r\n  const url = \"http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19SidoInfStateJson\";\r\n  const ServiceKey = \"jFJq%2B%2BJgU2Mc8PrE5BxRZetsGiBrM%2BXDSku%2FUFCuzZ7j8FrslWnJ%2BR2xa7QbRStVG9HfSDU%2BmBQz3SCSfZmfXw%3D%3D\";\r\n\r\n  const result = axios.get(url + \"?ServiceKey=\" + ServiceKey);\r\n\r\n  useEffect(() => {\r\n    function getResult() {\r\n      return new Promise((resolve, reject) => {\r\n        if (result) {\r\n          resolve(result);\r\n        }\r\n        reject(\"응답이 거절 되었습니다.\");\r\n      });\r\n    }\r\n\r\n    \r\n     getResult().then(function (showData) {\r\n\r\n      const requestDate = showData.data.response.body.items.item;\r\n      \r\n      const gubunData = [];\r\n      const incDecData = [];\r\n      const totalData = []\r\n      const finalData = {};\r\n\r\n      for (let i = 0; i < requestDate.length; i++) {\r\n        gubunData.push(requestDate[i].gubun);\r\n        incDecData.push(requestDate[i].incDec);\r\n        totalData.push(requestDate[i].defCnt)\r\n      }\r\n      finalData[\"gubun\"] = gubunData;\r\n      finalData[\"incDec\"] = incDecData; \r\n      finalData[\"total\"] = totalData;\r\n      setData(finalData);\r\n    })\r\n      getResult();\r\n  },[]);\r\n\r\n  const covid = data;\r\n\r\n  return (\r\n    <div>\r\n       <Map apiresult={covid}/> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ApiCall;\r\n"]},"metadata":{},"sourceType":"module"}